Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears once or twice, return an array of all the integers that appears twice.

You must write an algorithm that runs in O(n) time and uses only constant auxiliary space, excluding the space needed to store the output

 

Example 1:

Input: nums = [4,3,2,7,8,2,3,1]
Output: [2,3]

Example 2:

Input: nums = [1,1,2]
Output: [1]

Example 3:

Input: nums = [1]
Output: []




class Solution {
public:
    vector<int> findDuplicates(vector<int>& nums) {
        vector<int> res;  // Vector to store the result (duplicates)
        
        for(int i = 0; i < nums.size(); i++) {
            int element = abs(nums[i]);  // Get the absolute value
            int seat = element - 1;      // Determine the index for this element
            
            // If the value at index 'seat' is negative, it's a duplicate
            if(nums[seat] < 0) {
                res.push_back(element);  // Add the duplicate to the result
            } else {
                nums[seat] = -nums[seat];  // Mark the element as visited
            }
        }
        
        return res;  // Return the list of duplicates
    }
};
